// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again
// with `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'
    as obx_int; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart' as obx;
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'repository/APITokenDetails.dart';
import 'repository/AllFormData.dart';
import 'repository/login_response.dart';
import 'repository/user.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <obx_int.ModelEntity>[
  obx_int.ModelEntity(
    id: const obx_int.IdUid(1, 7292107109677198906),
    name: 'User',
    lastPropertyId: const obx_int.IdUid(3, 3182952786789225637),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 8695199281253615874),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 3586023183850932276),
        name: 'name',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 3182952786789225637),
        name: 'email',
        type: 9,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(2, 5994359312996350527),
    name: 'UserLoginData',
    lastPropertyId: const obx_int.IdUid(19, 8054822858723008887),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 3938460108709663894),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 7711843345973175865),
        name: 'userId',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 2046823026047832525),
        name: 'accessToken',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 4536174782767400820),
        name: 'accessTokenGeneratedDate',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(5, 8182254269292356351),
        name: 'accessTokenExpiryDate',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(6, 7356478645148649225),
        name: 'refreshToken',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(7, 4455190681759273063),
        name: 'refreshTokenGeneratedDate',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(8, 4721903993237679034),
        name: 'refreshTokenExpiryDate',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(9, 6734312305972309943),
        name: 'firstName',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(10, 7458716871115879443),
        name: 'lastName',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(11, 9038435084368303414),
        name: 'jobTitleId',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(12, 6479525966926795435),
        name: 'jobTitleDescription',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(13, 1633583812093267983),
        name: 'emailId',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(14, 4312462791319619815),
        name: 'cSSId',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(15, 6574666159704784329),
        name: 'leadGangerCSSID',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(16, 394173729876767168),
        name: 'isTeamLead',
        type: 1,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(17, 1395266459815434106),
        name: 'isUpdateSecurityQuestion',
        type: 1,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(18, 8658605449483497665),
        name: 'operativeTypeID',
        type: 6,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(19, 8054822858723008887),
        name: 'operativeTypeDescription',
        type: 9,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(3, 1069068686493097561),
    name: 'AllFormData',
    lastPropertyId: const obx_int.IdUid(14, 690242995353791813),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 4623678920452075804),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 1932044256247128405),
        name: 'userId',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 2243150620444573979),
        name: 'orderNumber',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 2866046327911989478),
        name: 'visitId',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(5, 7739842406391922921),
        name: 'scheduleId',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(6, 5644090261436924588),
        name: 'formId',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(7, 7433697115058883878),
        name: 'createdAt',
        type: 10,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(8, 1348121902226971102),
        name: 'catCode',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(9, 3253065725589258455),
        name: 'answer',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(10, 3942648006766705291),
        name: 'questionType',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(11, 138746756714875909),
        name: 'modifiedAt',
        type: 10,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(12, 6407152199124483812),
        name: 'isVisible',
        type: 1,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(13, 3218828745874236058),
        name: 'formName',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(14, 690242995353791813),
        name: 'createdOn',
        type: 10,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(4, 174694312030200874),
    name: 'APITokenDetails',
    lastPropertyId: const obx_int.IdUid(8, 6289839311524790851),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 123944130262372029),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 3243186351960754419),
        name: 'userId',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 3322569877446199892),
        name: 'accessToken',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 441637782162156290),
        name: 'accessTokenGeneratedDate',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(5, 1190565569035096482),
        name: 'accessTokenExpiryDate',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(6, 4231550303489619871),
        name: 'refreshToken',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(7, 7106335958606046680),
        name: 'refreshTokenGeneratedDate',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(8, 6289839311524790851),
        name: 'refreshTokenExpiryDate',
        type: 9,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
];

/// Shortcut for [obx.Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [obx.Store.new] for an explanation of all parameters.
///
/// For Flutter apps, also calls `loadObjectBoxLibraryAndroidCompat()` from
/// the ObjectBox Flutter library to fix loading the native ObjectBox library
/// on Android 6 and older.
Future<obx.Store> openStore({
  String? directory,
  int? maxDBSizeInKB,
  int? maxDataSizeInKB,
  int? fileMode,
  int? maxReaders,
  bool queriesCaseSensitiveDefault = true,
  String? macosApplicationGroup,
}) async {
  await loadObjectBoxLibraryAndroidCompat();
  return obx.Store(
    getObjectBoxModel(),
    directory: directory ?? (await defaultStoreDirectory()).path,
    maxDBSizeInKB: maxDBSizeInKB,
    maxDataSizeInKB: maxDataSizeInKB,
    fileMode: fileMode,
    maxReaders: maxReaders,
    queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
    macosApplicationGroup: macosApplicationGroup,
  );
}

/// Returns the ObjectBox model definition for this project for use with
/// [obx.Store.new].
obx_int.ModelDefinition getObjectBoxModel() {
  final model = obx_int.ModelInfo(
    entities: _entities,
    lastEntityId: const obx_int.IdUid(4, 174694312030200874),
    lastIndexId: const obx_int.IdUid(0, 0),
    lastRelationId: const obx_int.IdUid(0, 0),
    lastSequenceId: const obx_int.IdUid(0, 0),
    retiredEntityUids: const [],
    retiredIndexUids: const [],
    retiredPropertyUids: const [],
    retiredRelationUids: const [],
    modelVersion: 5,
    modelVersionParserMinimum: 5,
    version: 1,
  );

  final bindings = <Type, obx_int.EntityDefinition>{
    User: obx_int.EntityDefinition<User>(
      model: _entities[0],
      toOneRelations: (User object) => [],
      toManyRelations: (User object) => {},
      getId: (User object) => object.id,
      setId: (User object, int id) {
        object.id = id;
      },
      objectToFB: (User object, fb.Builder fbb) {
        final nameOffset = fbb.writeString(object.name);
        final emailOffset = fbb.writeString(object.email);
        fbb.startTable(4);
        fbb.addInt64(0, object.id);
        fbb.addOffset(1, nameOffset);
        fbb.addOffset(2, emailOffset);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final idParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          4,
          0,
        );
        final nameParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 6, '');
        final emailParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 8, '');
        final object = User(id: idParam, name: nameParam, email: emailParam);

        return object;
      },
    ),
    UserLoginData: obx_int.EntityDefinition<UserLoginData>(
      model: _entities[1],
      toOneRelations: (UserLoginData object) => [],
      toManyRelations: (UserLoginData object) => {},
      getId: (UserLoginData object) => object.id,
      setId: (UserLoginData object, int id) {
        object.id = id;
      },
      objectToFB: (UserLoginData object, fb.Builder fbb) {
        final userIdOffset = object.userId == null
            ? null
            : fbb.writeString(object.userId!);
        final accessTokenOffset = object.accessToken == null
            ? null
            : fbb.writeString(object.accessToken!);
        final accessTokenGeneratedDateOffset =
            object.accessTokenGeneratedDate == null
            ? null
            : fbb.writeString(object.accessTokenGeneratedDate!);
        final accessTokenExpiryDateOffset = object.accessTokenExpiryDate == null
            ? null
            : fbb.writeString(object.accessTokenExpiryDate!);
        final refreshTokenOffset = object.refreshToken == null
            ? null
            : fbb.writeString(object.refreshToken!);
        final refreshTokenGeneratedDateOffset =
            object.refreshTokenGeneratedDate == null
            ? null
            : fbb.writeString(object.refreshTokenGeneratedDate!);
        final refreshTokenExpiryDateOffset =
            object.refreshTokenExpiryDate == null
            ? null
            : fbb.writeString(object.refreshTokenExpiryDate!);
        final firstNameOffset = object.firstName == null
            ? null
            : fbb.writeString(object.firstName!);
        final lastNameOffset = object.lastName == null
            ? null
            : fbb.writeString(object.lastName!);
        final jobTitleIdOffset = object.jobTitleId == null
            ? null
            : fbb.writeString(object.jobTitleId!);
        final jobTitleDescriptionOffset = object.jobTitleDescription == null
            ? null
            : fbb.writeString(object.jobTitleDescription!);
        final emailIdOffset = object.emailId == null
            ? null
            : fbb.writeString(object.emailId!);
        final cSSIdOffset = object.cSSId == null
            ? null
            : fbb.writeString(object.cSSId!);
        final leadGangerCSSIDOffset = object.leadGangerCSSID == null
            ? null
            : fbb.writeString(object.leadGangerCSSID!);
        final operativeTypeDescriptionOffset =
            object.operativeTypeDescription == null
            ? null
            : fbb.writeString(object.operativeTypeDescription!);
        fbb.startTable(20);
        fbb.addInt64(0, object.id);
        fbb.addOffset(1, userIdOffset);
        fbb.addOffset(2, accessTokenOffset);
        fbb.addOffset(3, accessTokenGeneratedDateOffset);
        fbb.addOffset(4, accessTokenExpiryDateOffset);
        fbb.addOffset(5, refreshTokenOffset);
        fbb.addOffset(6, refreshTokenGeneratedDateOffset);
        fbb.addOffset(7, refreshTokenExpiryDateOffset);
        fbb.addOffset(8, firstNameOffset);
        fbb.addOffset(9, lastNameOffset);
        fbb.addOffset(10, jobTitleIdOffset);
        fbb.addOffset(11, jobTitleDescriptionOffset);
        fbb.addOffset(12, emailIdOffset);
        fbb.addOffset(13, cSSIdOffset);
        fbb.addOffset(14, leadGangerCSSIDOffset);
        fbb.addBool(15, object.isTeamLead);
        fbb.addBool(16, object.isUpdateSecurityQuestion);
        fbb.addInt64(17, object.operativeTypeID);
        fbb.addOffset(18, operativeTypeDescriptionOffset);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final idParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          4,
          0,
        );
        final userIdParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 6);
        final accessTokenParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 8);
        final accessTokenGeneratedDateParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 10);
        final accessTokenExpiryDateParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 12);
        final refreshTokenParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 14);
        final refreshTokenGeneratedDateParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 16);
        final refreshTokenExpiryDateParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 18);
        final firstNameParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 20);
        final lastNameParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 22);
        final jobTitleIdParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 24);
        final jobTitleDescriptionParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 26);
        final emailIdParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 28);
        final cSSIdParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 30);
        final leadGangerCSSIDParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 32);
        final isTeamLeadParam = const fb.BoolReader().vTableGetNullable(
          buffer,
          rootOffset,
          34,
        );
        final isUpdateSecurityQuestionParam = const fb.BoolReader()
            .vTableGetNullable(buffer, rootOffset, 36);
        final operativeTypeIDParam = const fb.Int64Reader().vTableGetNullable(
          buffer,
          rootOffset,
          38,
        );
        final operativeTypeDescriptionParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 40);
        final object = UserLoginData(
          id: idParam,
          userId: userIdParam,
          accessToken: accessTokenParam,
          accessTokenGeneratedDate: accessTokenGeneratedDateParam,
          accessTokenExpiryDate: accessTokenExpiryDateParam,
          refreshToken: refreshTokenParam,
          refreshTokenGeneratedDate: refreshTokenGeneratedDateParam,
          refreshTokenExpiryDate: refreshTokenExpiryDateParam,
          firstName: firstNameParam,
          lastName: lastNameParam,
          jobTitleId: jobTitleIdParam,
          jobTitleDescription: jobTitleDescriptionParam,
          emailId: emailIdParam,
          cSSId: cSSIdParam,
          leadGangerCSSID: leadGangerCSSIDParam,
          isTeamLead: isTeamLeadParam,
          isUpdateSecurityQuestion: isUpdateSecurityQuestionParam,
          operativeTypeID: operativeTypeIDParam,
          operativeTypeDescription: operativeTypeDescriptionParam,
        );

        return object;
      },
    ),
    AllFormData: obx_int.EntityDefinition<AllFormData>(
      model: _entities[2],
      toOneRelations: (AllFormData object) => [],
      toManyRelations: (AllFormData object) => {},
      getId: (AllFormData object) => object.id,
      setId: (AllFormData object, int id) {
        object.id = id;
      },
      objectToFB: (AllFormData object, fb.Builder fbb) {
        final userIdOffset = object.userId == null
            ? null
            : fbb.writeString(object.userId!);
        final orderNumberOffset = object.orderNumber == null
            ? null
            : fbb.writeString(object.orderNumber!);
        final visitIdOffset = object.visitId == null
            ? null
            : fbb.writeString(object.visitId!);
        final scheduleIdOffset = object.scheduleId == null
            ? null
            : fbb.writeString(object.scheduleId!);
        final formIdOffset = object.formId == null
            ? null
            : fbb.writeString(object.formId!);
        final catCodeOffset = object.catCode == null
            ? null
            : fbb.writeString(object.catCode!);
        final answerOffset = object.answer == null
            ? null
            : fbb.writeString(object.answer!);
        final questionTypeOffset = object.questionType == null
            ? null
            : fbb.writeString(object.questionType!);
        final formNameOffset = object.formName == null
            ? null
            : fbb.writeString(object.formName!);
        fbb.startTable(15);
        fbb.addInt64(0, object.id);
        fbb.addOffset(1, userIdOffset);
        fbb.addOffset(2, orderNumberOffset);
        fbb.addOffset(3, visitIdOffset);
        fbb.addOffset(4, scheduleIdOffset);
        fbb.addOffset(5, formIdOffset);
        fbb.addInt64(6, object.createdAt?.millisecondsSinceEpoch);
        fbb.addOffset(7, catCodeOffset);
        fbb.addOffset(8, answerOffset);
        fbb.addOffset(9, questionTypeOffset);
        fbb.addInt64(10, object.modifiedAt?.millisecondsSinceEpoch);
        fbb.addBool(11, object.isVisible);
        fbb.addOffset(12, formNameOffset);
        fbb.addInt64(13, object.createdOn?.millisecondsSinceEpoch);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final createdAtValue = const fb.Int64Reader().vTableGetNullable(
          buffer,
          rootOffset,
          16,
        );
        final modifiedAtValue = const fb.Int64Reader().vTableGetNullable(
          buffer,
          rootOffset,
          24,
        );
        final createdOnValue = const fb.Int64Reader().vTableGetNullable(
          buffer,
          rootOffset,
          30,
        );
        final idParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          4,
          0,
        );
        final userIdParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 6);
        final orderNumberParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 8);
        final visitIdParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 10);
        final scheduleIdParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 12);
        final formIdParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 14);
        final formNameParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 28);
        final createdAtParam = createdAtValue == null
            ? null
            : DateTime.fromMillisecondsSinceEpoch(createdAtValue);
        final createdOnParam = createdOnValue == null
            ? null
            : DateTime.fromMillisecondsSinceEpoch(createdOnValue);
        final catCodeParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 18);
        final answerParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 20);
        final questionTypeParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 22);
        final modifiedAtParam = modifiedAtValue == null
            ? null
            : DateTime.fromMillisecondsSinceEpoch(modifiedAtValue);
        final isVisibleParam = const fb.BoolReader().vTableGetNullable(
          buffer,
          rootOffset,
          26,
        );
        final object = AllFormData(
          id: idParam,
          userId: userIdParam,
          orderNumber: orderNumberParam,
          visitId: visitIdParam,
          scheduleId: scheduleIdParam,
          formId: formIdParam,
          formName: formNameParam,
          createdAt: createdAtParam,
          createdOn: createdOnParam,
          catCode: catCodeParam,
          answer: answerParam,
          questionType: questionTypeParam,
          modifiedAt: modifiedAtParam,
          isVisible: isVisibleParam,
        );

        return object;
      },
    ),
    APITokenDetails: obx_int.EntityDefinition<APITokenDetails>(
      model: _entities[3],
      toOneRelations: (APITokenDetails object) => [],
      toManyRelations: (APITokenDetails object) => {},
      getId: (APITokenDetails object) => object.id,
      setId: (APITokenDetails object, int id) {
        object.id = id;
      },
      objectToFB: (APITokenDetails object, fb.Builder fbb) {
        final userIdOffset = object.userId == null
            ? null
            : fbb.writeString(object.userId!);
        final accessTokenOffset = object.accessToken == null
            ? null
            : fbb.writeString(object.accessToken!);
        final accessTokenGeneratedDateOffset =
            object.accessTokenGeneratedDate == null
            ? null
            : fbb.writeString(object.accessTokenGeneratedDate!);
        final accessTokenExpiryDateOffset = object.accessTokenExpiryDate == null
            ? null
            : fbb.writeString(object.accessTokenExpiryDate!);
        final refreshTokenOffset = object.refreshToken == null
            ? null
            : fbb.writeString(object.refreshToken!);
        final refreshTokenGeneratedDateOffset =
            object.refreshTokenGeneratedDate == null
            ? null
            : fbb.writeString(object.refreshTokenGeneratedDate!);
        final refreshTokenExpiryDateOffset =
            object.refreshTokenExpiryDate == null
            ? null
            : fbb.writeString(object.refreshTokenExpiryDate!);
        fbb.startTable(9);
        fbb.addInt64(0, object.id);
        fbb.addOffset(1, userIdOffset);
        fbb.addOffset(2, accessTokenOffset);
        fbb.addOffset(3, accessTokenGeneratedDateOffset);
        fbb.addOffset(4, accessTokenExpiryDateOffset);
        fbb.addOffset(5, refreshTokenOffset);
        fbb.addOffset(6, refreshTokenGeneratedDateOffset);
        fbb.addOffset(7, refreshTokenExpiryDateOffset);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final idParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          4,
          0,
        );
        final userIdParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 6);
        final accessTokenParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 8);
        final accessTokenGeneratedDateParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 10);
        final accessTokenExpiryDateParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 12);
        final refreshTokenParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 14);
        final refreshTokenGeneratedDateParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 16);
        final refreshTokenExpiryDateParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 18);
        final object = APITokenDetails(
          id: idParam,
          userId: userIdParam,
          accessToken: accessTokenParam,
          accessTokenGeneratedDate: accessTokenGeneratedDateParam,
          accessTokenExpiryDate: accessTokenExpiryDateParam,
          refreshToken: refreshTokenParam,
          refreshTokenGeneratedDate: refreshTokenGeneratedDateParam,
          refreshTokenExpiryDate: refreshTokenExpiryDateParam,
        );

        return object;
      },
    ),
  };

  return obx_int.ModelDefinition(model, bindings);
}

/// [User] entity fields to define ObjectBox queries.
class User_ {
  /// See [User.id].
  static final id = obx.QueryIntegerProperty<User>(_entities[0].properties[0]);

  /// See [User.name].
  static final name = obx.QueryStringProperty<User>(_entities[0].properties[1]);

  /// See [User.email].
  static final email = obx.QueryStringProperty<User>(
    _entities[0].properties[2],
  );
}

/// [UserLoginData] entity fields to define ObjectBox queries.
class UserLoginData_ {
  /// See [UserLoginData.id].
  static final id = obx.QueryIntegerProperty<UserLoginData>(
    _entities[1].properties[0],
  );

  /// See [UserLoginData.userId].
  static final userId = obx.QueryStringProperty<UserLoginData>(
    _entities[1].properties[1],
  );

  /// See [UserLoginData.accessToken].
  static final accessToken = obx.QueryStringProperty<UserLoginData>(
    _entities[1].properties[2],
  );

  /// See [UserLoginData.accessTokenGeneratedDate].
  static final accessTokenGeneratedDate =
      obx.QueryStringProperty<UserLoginData>(_entities[1].properties[3]);

  /// See [UserLoginData.accessTokenExpiryDate].
  static final accessTokenExpiryDate = obx.QueryStringProperty<UserLoginData>(
    _entities[1].properties[4],
  );

  /// See [UserLoginData.refreshToken].
  static final refreshToken = obx.QueryStringProperty<UserLoginData>(
    _entities[1].properties[5],
  );

  /// See [UserLoginData.refreshTokenGeneratedDate].
  static final refreshTokenGeneratedDate =
      obx.QueryStringProperty<UserLoginData>(_entities[1].properties[6]);

  /// See [UserLoginData.refreshTokenExpiryDate].
  static final refreshTokenExpiryDate = obx.QueryStringProperty<UserLoginData>(
    _entities[1].properties[7],
  );

  /// See [UserLoginData.firstName].
  static final firstName = obx.QueryStringProperty<UserLoginData>(
    _entities[1].properties[8],
  );

  /// See [UserLoginData.lastName].
  static final lastName = obx.QueryStringProperty<UserLoginData>(
    _entities[1].properties[9],
  );

  /// See [UserLoginData.jobTitleId].
  static final jobTitleId = obx.QueryStringProperty<UserLoginData>(
    _entities[1].properties[10],
  );

  /// See [UserLoginData.jobTitleDescription].
  static final jobTitleDescription = obx.QueryStringProperty<UserLoginData>(
    _entities[1].properties[11],
  );

  /// See [UserLoginData.emailId].
  static final emailId = obx.QueryStringProperty<UserLoginData>(
    _entities[1].properties[12],
  );

  /// See [UserLoginData.cSSId].
  static final cSSId = obx.QueryStringProperty<UserLoginData>(
    _entities[1].properties[13],
  );

  /// See [UserLoginData.leadGangerCSSID].
  static final leadGangerCSSID = obx.QueryStringProperty<UserLoginData>(
    _entities[1].properties[14],
  );

  /// See [UserLoginData.isTeamLead].
  static final isTeamLead = obx.QueryBooleanProperty<UserLoginData>(
    _entities[1].properties[15],
  );

  /// See [UserLoginData.isUpdateSecurityQuestion].
  static final isUpdateSecurityQuestion =
      obx.QueryBooleanProperty<UserLoginData>(_entities[1].properties[16]);

  /// See [UserLoginData.operativeTypeID].
  static final operativeTypeID = obx.QueryIntegerProperty<UserLoginData>(
    _entities[1].properties[17],
  );

  /// See [UserLoginData.operativeTypeDescription].
  static final operativeTypeDescription =
      obx.QueryStringProperty<UserLoginData>(_entities[1].properties[18]);
}

/// [AllFormData] entity fields to define ObjectBox queries.
class AllFormData_ {
  /// See [AllFormData.id].
  static final id = obx.QueryIntegerProperty<AllFormData>(
    _entities[2].properties[0],
  );

  /// See [AllFormData.userId].
  static final userId = obx.QueryStringProperty<AllFormData>(
    _entities[2].properties[1],
  );

  /// See [AllFormData.orderNumber].
  static final orderNumber = obx.QueryStringProperty<AllFormData>(
    _entities[2].properties[2],
  );

  /// See [AllFormData.visitId].
  static final visitId = obx.QueryStringProperty<AllFormData>(
    _entities[2].properties[3],
  );

  /// See [AllFormData.scheduleId].
  static final scheduleId = obx.QueryStringProperty<AllFormData>(
    _entities[2].properties[4],
  );

  /// See [AllFormData.formId].
  static final formId = obx.QueryStringProperty<AllFormData>(
    _entities[2].properties[5],
  );

  /// See [AllFormData.createdAt].
  static final createdAt = obx.QueryDateProperty<AllFormData>(
    _entities[2].properties[6],
  );

  /// See [AllFormData.catCode].
  static final catCode = obx.QueryStringProperty<AllFormData>(
    _entities[2].properties[7],
  );

  /// See [AllFormData.answer].
  static final answer = obx.QueryStringProperty<AllFormData>(
    _entities[2].properties[8],
  );

  /// See [AllFormData.questionType].
  static final questionType = obx.QueryStringProperty<AllFormData>(
    _entities[2].properties[9],
  );

  /// See [AllFormData.modifiedAt].
  static final modifiedAt = obx.QueryDateProperty<AllFormData>(
    _entities[2].properties[10],
  );

  /// See [AllFormData.isVisible].
  static final isVisible = obx.QueryBooleanProperty<AllFormData>(
    _entities[2].properties[11],
  );

  /// See [AllFormData.formName].
  static final formName = obx.QueryStringProperty<AllFormData>(
    _entities[2].properties[12],
  );

  /// See [AllFormData.createdOn].
  static final createdOn = obx.QueryDateProperty<AllFormData>(
    _entities[2].properties[13],
  );
}

/// [APITokenDetails] entity fields to define ObjectBox queries.
class APITokenDetails_ {
  /// See [APITokenDetails.id].
  static final id = obx.QueryIntegerProperty<APITokenDetails>(
    _entities[3].properties[0],
  );

  /// See [APITokenDetails.userId].
  static final userId = obx.QueryStringProperty<APITokenDetails>(
    _entities[3].properties[1],
  );

  /// See [APITokenDetails.accessToken].
  static final accessToken = obx.QueryStringProperty<APITokenDetails>(
    _entities[3].properties[2],
  );

  /// See [APITokenDetails.accessTokenGeneratedDate].
  static final accessTokenGeneratedDate =
      obx.QueryStringProperty<APITokenDetails>(_entities[3].properties[3]);

  /// See [APITokenDetails.accessTokenExpiryDate].
  static final accessTokenExpiryDate = obx.QueryStringProperty<APITokenDetails>(
    _entities[3].properties[4],
  );

  /// See [APITokenDetails.refreshToken].
  static final refreshToken = obx.QueryStringProperty<APITokenDetails>(
    _entities[3].properties[5],
  );

  /// See [APITokenDetails.refreshTokenGeneratedDate].
  static final refreshTokenGeneratedDate =
      obx.QueryStringProperty<APITokenDetails>(_entities[3].properties[6]);

  /// See [APITokenDetails.refreshTokenExpiryDate].
  static final refreshTokenExpiryDate =
      obx.QueryStringProperty<APITokenDetails>(_entities[3].properties[7]);
}
