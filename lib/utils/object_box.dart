import 'dart:collection';

import 'package:flutter/cupertino.dart';
import 'package:flutter1/objectbox.g.dart';
import 'package:flutter1/repository/APITokenDetails.dart';
import 'package:flutter1/repository/AllFormData.dart';
import 'package:flutter1/repository/login_response.dart';
import 'package:flutter1/repository/user.dart';
import 'package:flutter1/utils/Utils.dart';
import 'package:intl/intl.dart';
import 'package:path/path.dart' as p;
import 'package:path_provider/path_provider.dart';

class ObjectBox {
  late final Store _store;

  late final Box<User> _userBox;

  late final Box<UserLoginData> _userLoginBox;

  late final Box<AllFormData> _allFormDataBox;
  late final Box<APITokenDetails> _apiTokenDetailsBox;

  late List<AllFormData> query;
  late List<APITokenDetails> query1;

  ObjectBox._init(this._store) {
    _userBox = Box<User>(_store);
    _userLoginBox = Box<UserLoginData>(_store);
    _allFormDataBox = Box<AllFormData>(_store);
    _apiTokenDetailsBox = Box<APITokenDetails>(_store);
  }

  static Future<ObjectBox> init() async {
    /*final store = await openStore();

    return ObjectBox._init(store);*/

    final docsDir = await getApplicationDocumentsDirectory();
    // Future<Store> openStore() {...} is generated by objectbox_generator
    final store = await openStore(
      directory: p.join(docsDir.path, "flutter_db"),
    );
    return ObjectBox._init(store);
  }

  User? getUser(int id) => _userBox.get(id);

  int insertUser(User user) => _userBox.put(user);

  bool deleteUser(int id) => _userBox.remove(id);

  Stream<List<User>> getAllUsers() => _userBox
      .query()
      .watch(triggerImmediately: true)
      .map((query) => query.find());

  UserLoginData? getLoginData(int id) => _userLoginBox.get(id);

  int addLoginData(UserLoginData loginData) => _userLoginBox.put(loginData);

  bool deleteLoginData(int id) => _userLoginBox.remove(id);

  Stream<List<UserLoginData>> getAllLoginData() => _userLoginBox
      .query()
      .watch(triggerImmediately: true)
      .map((query) => query.find());

  AllFormData? getFormData(int id) => _allFormDataBox.get(id);

  int addFormData(AllFormData formData) => _allFormDataBox.put(formData);

  Future<List<int>> storeFormAllDataAsync(List<AllFormData> allFormDataList) =>
      _allFormDataBox.putManyAsync(allFormDataList);

  List<int> storeFormAllData(List<AllFormData> allFormDataList) =>
      _allFormDataBox.putMany(allFormDataList);

  Stream<List<AllFormData>> getFormAllData() => _allFormDataBox
      .query()
      .watch(triggerImmediately: true)
      .map((query) => query.find());

  List<AllFormData> loadFormData(String formId) {
    return query =
        _allFormDataBox
            .query(AllFormData_.formId.equals(formId))
            .build()
            .find();
  }

  List<AllFormData> getFormDataByCatCode(String formId, String catCode) {
    return query =
        _allFormDataBox
            .query(
              AllFormData_.formId
                  .equals(formId)
                  .and(AllFormData_.catCode.contains(catCode)),
            )
            .build()
            .find();
  }

  int storeImageData(String value, String formId,String catCode) {
    debugPrint('comes storeImageData $value ::: $catCode');
      AllFormData? data =
          _allFormDataBox
              .query(
                AllFormData_.formId
                    .equals(formId)
                    .and(AllFormData_.catCode.equals(catCode)),
              )
              .build()
              .findFirst();

      data?.answer = value;
     return _allFormDataBox.put(data!);
  }

  String? getGateCheckFormForToday() {
    Utils utils = Utils();
    DateTime parsedDate = DateTime.parse(utils.getCurrentDateOnly());
    Query<AllFormData> query =
        _allFormDataBox
            .query(AllFormData_.createdOn.equalsDate(parsedDate))
            .build();

    AllFormData? formData = query.findFirst();
    query.close();
    print('Form data size:::${formData?.createdAt}');
    String? formId =
        formData?.formId == null
            ? utils.generateUDID().toString()
            : formData?.formId.toString();
    return formId;
  }

  List<AllFormData>? getGateCheckFormByFormId(String formId) {
    Query<AllFormData> query =
        _allFormDataBox.query(AllFormData_.formId.equals(formId)).build();

    List<AllFormData>? formData = query.find();
    query.close();
    print('Form data size:::${formData.length}');
    return formData;
  }

  void updateFormAnswerData(HashSet<AllFormData> answerSet) {
    try {} catch (e) {
      print(e);
    }
  }

  int storeAPITokenDetails(APITokenDetails tokenDetails) =>
      _apiTokenDetailsBox.put(tokenDetails);

  APITokenDetails? getTokenDetails(int id) => _apiTokenDetailsBox.get(id);

  /*
  Stream<List<APITokenDetails>> getAllTokenDeatils() => _apiTokenDetailsBox
      .query()
      .watch(triggerImmediately: true)
      .map((query) => query.find());
*/

  /* List<APITokenDetails> getAllTokenDeatils() {
    return query =
        _apiTokenDetailsBox
            .query()
            .build()
            .find();
  }*/

  /*  Stream<List<APITokenDetails>> getAllTokenDeatils() => _apiTokenDetailsBox
      .query()
      .watch(triggerImmediately: true)
      .map((query) => query.find());*/

  List<APITokenDetails> getAllTokenDeatils() {
    return query1 = _apiTokenDetailsBox.query().build().find();
  }

  int deleteTokenDetails() => _userBox.removeAll();
}
